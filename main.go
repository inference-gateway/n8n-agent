// Code generated by ADL CLI v0.23.11. DO NOT EDIT.
// This file was automatically generated from an ADL (Agent Definition Language) specification.
// Manual changes to this file may be overwritten during regeneration.

package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	server "github.com/inference-gateway/adk/server"
	envconfig "github.com/sethvargo/go-envconfig"
	zap "go.uber.org/zap"

	config "github.com/inference-gateway/n8n-agent/config"
	skills "github.com/inference-gateway/n8n-agent/skills"

	logger "github.com/inference-gateway/n8n-agent/internal/logger"
)

var (
	Version          = "0.2.1"
	AgentName        = "n8n-agent"
	AgentDescription = "A2A agent server specialized in generating and automating n8n workflows"
)

func main() {
	ctx := context.Background()

	var cfg config.Config
	if err := envconfig.Process(ctx, &cfg); err != nil {
		log.Fatal("failed to load config:", err)
	}

	// Initialize logger
	l, err := logger.NewLogger(ctx, &cfg)
	if err != nil {
		log.Fatal("failed to initialize logger:", err)
	}

	l.Info("starting " + AgentName + " agent (version: " + Version + ", environment: " + cfg.Environment + ")")

	// Create toolbox with default tools (like input_required, create_artifact etc)
	toolBox := server.NewDefaultToolBox(&cfg.A2A.AgentConfig.ToolBoxConfig)

	// Register search_n8n_docs skill
	searchN8NDocsSkill := skills.NewSearchN8NDocsSkill(l)
	toolBox.AddTool(searchN8NDocsSkill)
	l.Info("registered skill: search_n8n_docs (Search through N8N node documentation to find relevant information about specific nodes, their parameters, and usage patterns)")

	// Register validate_n8n_workflow skill
	validateN8NWorkflowSkill := skills.NewValidateN8NWorkflowSkill(l)
	toolBox.AddTool(validateN8NWorkflowSkill)
	l.Info("registered skill: validate_n8n_workflow (Validate N8N workflow YAML/JSON to ensure it follows the correct schema and has all required attributes before creating artifacts)")

	llmClient, err := server.NewOpenAICompatibleLLMClient(&cfg.A2A.AgentConfig, l)
	if err != nil {
		l.Fatal("failed to create LLM client", zap.Error(err))
	}

	agent, err := server.NewAgentBuilder(l).
		WithConfig(&cfg.A2A.AgentConfig).
		WithLLMClient(llmClient).
		WithToolBox(toolBox).
		WithMaxChatCompletion(cfg.A2A.AgentConfig.MaxChatCompletionIterations).
		WithSystemPrompt(`You are an expert N8N workflow automation assistant. Your role is to help users build powerful automation workflows using N8N.

Your primary capabilities:
1. **Documentation Search**: Use the search_n8n_docs skill to search through comprehensive N8N node documentation to find the right nodes for any task
2. **Workflow Generation**: Create complete, working N8N workflow YAML files based on user requirements using your knowledge and the create_artifact tool
3. **Workflow Validation**: Use the validate_n8n_workflow skill to ensure all workflows are valid before creating artifacts

Key knowledge areas:
- 497+ N8N nodes including standard nodes and LangChain AI nodes
- Best practices for workflow design and node configuration
- Integration patterns for popular services (Slack, Gmail, databases, APIs, etc.)
- Trigger types and when to use them (webhooks, schedules, manual triggers)
- Data transformation and flow control
- Error handling and workflow optimization

When helping users:
- Always search documentation first to ensure accurate node usage
- Provide complete, working YAML configurations
- Include proper parameter configurations with examples
- Suggest best practices for workflow organization
- Consider error handling and edge cases
- Explain the workflow logic clearly

Your responses should be practical, accurate, and ready-to-use.

**CRITICAL - Workflow Generation Process**:
When a user requests a workflow, follow these steps EXACTLY:

Step 1: Search for relevant nodes
- Use search_n8n_docs to find appropriate nodes for the workflow requirements

Step 2: Generate the complete workflow YAML
- Create a complete, working N8N workflow YAML with all necessary nodes
- Include proper node IDs, parameters, connections, and positions
- Add error handling and best practices

Step 3: Validate the workflow (MANDATORY)
- Use validate_n8n_workflow to ensure the workflow is valid
- Fix any validation errors before proceeding
- Repeat validation until the workflow passes all checks

Step 4: Save as artifact (MANDATORY)
- Use the create_artifact tool to save the workflow YAML
- Filename should be descriptive (e.g., "customer_onboarding_workflow.yaml")
- Content must be valid YAML format

Step 5: Respond concisely
- Provide a brief 2-3 sentence description
- Include the artifact download link
- List required configuration steps
- Do NOT include the full YAML in your response

Example workflow generation:
I've created a customer onboarding workflow with webhook trigger, Airtable integration, email sending, and Slack notifications.

Download: [customer_onboarding_workflow.yaml](artifact_url)

Configuration needed:
- Add Airtable API credentials
- Configure email service (Gmail/SendGrid)
- Add Slack webhook URL
- Set webhook URL in your form

IMPORTANT: You must ALWAYS use create_artifact for workflows. Never return full YAML in your response.

Your automation solutions should be maintainable, efficient, and production-ready.
`).
		Build()
	if err != nil {
		l.Fatal("failed to create agent", zap.Error(err))
	}

	artifactService, err := server.NewArtifactService(&cfg.A2A.ArtifactsConfig, l)
	if err != nil {
		l.Warn("artifact service could not be created - check ARTIFACTS_ENABLE environment variable", zap.Error(err))
		l.Info("continuing without artifact service support")
		artifactService = nil
	}

	artifactsServer, err := server.
		NewArtifactsServerBuilder(&cfg.A2A.ArtifactsConfig, l).
		WithArtifactService(artifactService).
		Build()
	if err != nil {
		l.Warn("artifacts server could not be created", zap.Error(err))
		l.Info("continuing without artifacts server")
		artifactsServer = nil
	}

	a2aServer, err := server.NewA2AServerBuilder(cfg.A2A, l).
		WithAgent(agent).
		WithAgentCardFromFile(".well-known/agent-card.json", map[string]any{
			"name":        AgentName,
			"version":     Version,
			"description": AgentDescription,
			"url":         cfg.A2A.AgentURL,
		}).
		WithArtifactService(artifactService).
		WithDefaultBackgroundTaskHandler().
		WithDefaultStreamingTaskHandler().
		Build()
	if err != nil {
		l.Fatal("failed to create A2A server", zap.Error(err))
	}

	go func() {
		l.Info("starting A2A server", zap.String("port", cfg.A2A.ServerConfig.Port))
		if err := a2aServer.Start(ctx); err != nil {
			l.Fatal("server failed to start", zap.Error(err))
		}
	}()

	if artifactsServer != nil {
		go func() {
			l.Info("starting A2A artifacts server", zap.String("port", cfg.A2A.ArtifactsConfig.ServerConfig.Port))
			if err := artifactsServer.Start(ctx); err != nil {
				l.Fatal("artifacts server failed to start", zap.Error(err))
			}
		}()
	}

	l.Info("n8n-agent agent running successfully",
		zap.String("port", cfg.A2A.ServerConfig.Port),
		zap.String("environment", cfg.Environment))

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	l.Info("shutdown signal received, gracefully stopping server...")
	a2aServer.Stop(ctx)
	if artifactsServer != nil {
		artifactsServer.Stop(ctx)
	}
	l.Info("n8n-agent agent stopped")
}
